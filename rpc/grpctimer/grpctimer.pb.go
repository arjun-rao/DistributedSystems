// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpctimer.proto

package grpctimer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the client's time.
type GrpcTimeRequest struct {
	Data                 int64    `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrpcTimeRequest) Reset()         { *m = GrpcTimeRequest{} }
func (m *GrpcTimeRequest) String() string { return proto.CompactTextString(m) }
func (*GrpcTimeRequest) ProtoMessage()    {}
func (*GrpcTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89da7bde4300e2ba, []int{0}
}

func (m *GrpcTimeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrpcTimeRequest.Unmarshal(m, b)
}
func (m *GrpcTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrpcTimeRequest.Marshal(b, m, deterministic)
}
func (m *GrpcTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpcTimeRequest.Merge(m, src)
}
func (m *GrpcTimeRequest) XXX_Size() int {
	return xxx_messageInfo_GrpcTimeRequest.Size(m)
}
func (m *GrpcTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpcTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GrpcTimeRequest proto.InternalMessageInfo

func (m *GrpcTimeRequest) GetData() int64 {
	if m != nil {
		return m.Data
	}
	return 0
}

// The response message containing the server's time.
type GrpcTimeResponse struct {
	Data                 int64    `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrpcTimeResponse) Reset()         { *m = GrpcTimeResponse{} }
func (m *GrpcTimeResponse) String() string { return proto.CompactTextString(m) }
func (*GrpcTimeResponse) ProtoMessage()    {}
func (*GrpcTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89da7bde4300e2ba, []int{1}
}

func (m *GrpcTimeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrpcTimeResponse.Unmarshal(m, b)
}
func (m *GrpcTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrpcTimeResponse.Marshal(b, m, deterministic)
}
func (m *GrpcTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpcTimeResponse.Merge(m, src)
}
func (m *GrpcTimeResponse) XXX_Size() int {
	return xxx_messageInfo_GrpcTimeResponse.Size(m)
}
func (m *GrpcTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpcTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GrpcTimeResponse proto.InternalMessageInfo

func (m *GrpcTimeResponse) GetData() int64 {
	if m != nil {
		return m.Data
	}
	return 0
}

func init() {
	proto.RegisterType((*GrpcTimeRequest)(nil), "grpctimer.GrpcTimeRequest")
	proto.RegisterType((*GrpcTimeResponse)(nil), "grpctimer.GrpcTimeResponse")
}

func init() { proto.RegisterFile("grpctimer.proto", fileDescriptor_89da7bde4300e2ba) }

var fileDescriptor_89da7bde4300e2ba = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x2f, 0x2a, 0x48,
	0x2e, 0xc9, 0xcc, 0x4d, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0xa9, 0x72, 0xf1, 0xbb, 0x17, 0x15, 0x24, 0x87, 0x64, 0xe6, 0xa6, 0x06, 0xa5, 0x16, 0x96, 0xa6,
	0x16, 0x97, 0x08, 0x09, 0x71, 0xb1, 0xa4, 0x24, 0x96, 0x24, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x30,
	0x07, 0x81, 0xd9, 0x4a, 0x6a, 0x5c, 0x02, 0x08, 0x65, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0xd8,
	0xd4, 0x19, 0x05, 0x72, 0x71, 0xc0, 0xd4, 0x09, 0xb9, 0x72, 0x71, 0x04, 0xa7, 0xe6, 0xa5, 0x80,
	0xd9, 0x52, 0x7a, 0x08, 0x37, 0xa0, 0xd9, 0x27, 0x25, 0x8d, 0x55, 0x0e, 0x62, 0x89, 0x12, 0x43,
	0x12, 0x1b, 0xd8, 0xcd, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x41, 0x9a, 0xb9, 0x6b, 0xc6,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GrpcTimeClient is the client API for GrpcTime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrpcTimeClient interface {
	// Sends a greeting
	SendTime(ctx context.Context, in *GrpcTimeRequest, opts ...grpc.CallOption) (*GrpcTimeResponse, error)
}

type grpcTimeClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcTimeClient(cc grpc.ClientConnInterface) GrpcTimeClient {
	return &grpcTimeClient{cc}
}

func (c *grpcTimeClient) SendTime(ctx context.Context, in *GrpcTimeRequest, opts ...grpc.CallOption) (*GrpcTimeResponse, error) {
	out := new(GrpcTimeResponse)
	err := c.cc.Invoke(ctx, "/grpctimer.GrpcTime/SendTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcTimeServer is the server API for GrpcTime service.
type GrpcTimeServer interface {
	// Sends a greeting
	SendTime(context.Context, *GrpcTimeRequest) (*GrpcTimeResponse, error)
}

// UnimplementedGrpcTimeServer can be embedded to have forward compatible implementations.
type UnimplementedGrpcTimeServer struct {
}

func (*UnimplementedGrpcTimeServer) SendTime(ctx context.Context, req *GrpcTimeRequest) (*GrpcTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTime not implemented")
}

func RegisterGrpcTimeServer(s *grpc.Server, srv GrpcTimeServer) {
	s.RegisterService(&_GrpcTime_serviceDesc, srv)
}

func _GrpcTime_SendTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcTimeServer).SendTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctimer.GrpcTime/SendTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcTimeServer).SendTime(ctx, req.(*GrpcTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GrpcTime_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpctimer.GrpcTime",
	HandlerType: (*GrpcTimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTime",
			Handler:    _GrpcTime_SendTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpctimer.proto",
}
